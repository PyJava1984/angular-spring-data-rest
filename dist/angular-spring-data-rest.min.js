/*!
 * angular-spring-data-rest 0.3.2
 * Copyright 2015 Guy Brand (@guy_labs)
 * https://github.com/guylabs/angular-spring-data-rest
 */
!function () {
    "use strict";
    function a(b) {
        return angular.forEach(arguments, function (c) {
            c !== b && angular.forEach(c, function (c, d) {
                b[d] && b[d].constructor && b[d].constructor === Object ? a(b[d], c) : b[d] = c
            })
        }), angular.copy(b)
    }

    function b(a, b, c, d) {
        var e = a[b];
        if (e) {
            var f = {};
            if (f[c] = {}, d === !0)angular.forEach(Object.keys(e), function (a) {
                f[c][a] = e[a]
            }); else {
                var g = Object.keys(e)[0];
                f[c] = e[g]
            }
            a = angular.extend(a, f), delete a[b]
        }
        return a
    }

    function c(a, b) {
        return b && (a = e(a)), a
    }

    function d(a, b, c) {
        if (void 0 == a || !a)throw new Error("The provided resource name '" + b + "' has no valid URL in the '" + c + "' property.");
        return a
    }

    function e(a) {
        return a.replace(/{.*}/g, "")
    }

    function f(a) {
        var b = {}, c = /{\?(.*)}/g, d = c.exec(a)[1].split(",");
        return angular.forEach(d, function (a) {
            b[a] = ""
        }), b
    }

    angular.module("spring-data-rest", ["ngResource"]), angular.module("spring-data-rest").provider("SpringDataRestAdapter", function () {
        var e = {
            linksKey: "_links",
            linksHrefKey: "href",
            linksSelfLinkName: "self",
            embeddedKey: "_embedded",
            embeddedNewKey: "_embeddedItems",
            embeddedNamedResources: !1,
            resourcesKey: "_resources",
            resourcesFunction: void 0,
            fetchFunction: void 0,
            fetchAllKey: "_allLinks"
        };
        return {
            config: function (b) {
                if ("undefined" != typeof b) {
                    if (!angular.isObject(b))throw new Error("The given configuration '" + b + "' is not an object.");
                    if (void 0 != b.resourcesFunction && "function" != typeof b.resourcesFunction)throw new Error("The given resource function '" + b.resourcesFunction + "' is not of type function.");
                    if (void 0 != b.fetchFunction && "function" != typeof b.fetchFunction)throw new Error("The given fetch function '" + b.fetchFunction + "' is not of type function.");
                    e = a(e, b)
                }
                return e
            }, $get: ["$injector", function (a) {
                function g(b, c, d, f) {
                    return void 0 == e.resourcesFunction ? a.get("$resource")(b, c, d, f) : e.resourcesFunction(b, c, d, f)
                }

                function h(b, c, d, f, g) {
                    if (void 0 == e.fetchFunction) {
                        var h = [];
                        return h.push(a.get("$http").get(b).then(function (a) {
                            g ? h.push(i(a.data, f, !0).then(function (a) {
                                d[c] = a
                            })) : d[c] = a.data
                        }, function (b) {
                            return 404 != b.status ? a.get("$q").reject(b) : void 0
                        })), a.get("$q").all(h)
                    }
                    return e.fetchFunction(b, c, d, f, g)
                }

                var i = function j(i, k, l) {
                    function m(a, b) {
                        var f = d(a[e.linksKey][b][e.linksHrefKey], b, e.linksHrefKey);
                        return c(f, a[e.linksKey][b].templated)
                    }

                    var n = function (a, b, c, d) {
                        var h = this[e.linksKey], i = b;
                        if (angular.isObject(a)) {
                            if (!a.name)throw new Error("The provided resource object must contain a name property.");
                            var j = a.parameters;
                            return b && angular.isObject(b) ? i = j && angular.isObject(j) ? angular.extend(angular.copy(b), angular.copy(j)) : angular.copy(b) : j && angular.isObject(j) && (i = angular.copy(j)), angular.forEach(i, function (a, b) {
                                "" === a && delete i[b]
                            }), g(m(data, a.name), i, c, d)
                        }
                        if (a in h)return g(m(data, a), i, c, d);
                        var k = [];
                        return angular.forEach(h, function (a, b) {
                            if (a.templated) {
                                var c = f(a[e.linksHrefKey]);
                                k.push({name: b, parameters: c})
                            } else k.push({name: b})
                        }), k
                    }, o = a.get("$q").when(i), p = a.get("$q").defer();
                    return o.then(function (c) {
                        c.data && (c = c.data), (!angular.isObject(c) || c instanceof Array) && p.reject("Given data '" + c + "' is not of type object."), void 0 == k || k instanceof Array || "string" == typeof k || p.reject("Given fetch links '" + k + "' is not of type array or string.");
                        var d = void 0, f = [];
                        if (e.linksKey in c) {
                            var g = {};
                            g[e.resourcesKey] = n, d = angular.extend(angular.copy(c), g), void 0 != k && (d || (d = angular.copy(c)), angular.forEach(c[e.linksKey], function (a, b) {
                                b != e.linksSelfLinkName && (k == e.fetchAllKey || "string" == typeof k && b == k || k instanceof Array && k.indexOf(b) >= 0) && f.push(h(m(c, b), b, d, k, l))
                            }))
                        }
                        e.embeddedKey in c && (d || (d = angular.copy(c)), d = b(d, e.embeddedKey, e.embeddedNewKey, e.embeddedNamedResources), angular.forEach(d[e.embeddedNewKey], function (a, b) {
                            if (a instanceof Array && a.length > 0) {
                                var c, g = [];
                                angular.forEach(a, function (a, b) {
                                    c = j({data: a}, k, l).then(function (a) {
                                        g[b] = a
                                    }), f.push(c)
                                }), c ? c.then(function () {
                                    d[e.embeddedNewKey][b] = g
                                }) : d[e.embeddedNewKey][b] = g
                            } else f.push(j({data: a}, k, l).then(function (a) {
                                d[e.embeddedNewKey][b] = a
                            }))
                        })), a.get("$q").all(f).then(function () {
                            p.resolve(d ? d : c)
                        }, function (b) {
                            return p.reject(b), a.get("$q").reject(b)
                        })
                    }, function (b) {
                        return p.reject(b), a.get("$q").reject(b)
                    }), p.promise
                };
                return {process: i}
            }]
        }
    }), angular.module("spring-data-rest").provider("SpringDataRestInterceptor", ["$httpProvider", "SpringDataRestAdapterProvider", function (a) {
        return {
            apply: function () {
                a.interceptors.push("SpringDataRestInterceptor")
            }, $get: ["SpringDataRestAdapter", "$q", function (a, b) {
                return {
                    response: function (c) {
                        return c && angular.isObject(c.data) && (c.data = a.process(c.data)), c || b.when(c)
                    }
                }
            }]
        }
    }])
}();