/*!
 * angular-spring-data-rest 0.2.0
 * Copyright 2014 Guy Brûlé (@guy_labs)
 * https://github.com/guylabs/angular-spring-data-rest
 */
!function () {
    "use strict";
    function a(b) {
        return angular.forEach(arguments, function (c) {
            c !== b && angular.forEach(c, function (c, d) {
                b[d] && b[d].constructor && b[d].constructor === Object ? a(b[d], c) : b[d] = c
            })
        }), angular.copy(b)
    }

    function b(a, b, c) {
        var d = a[b];
        if (d) {
            var e = Object.keys(d)[0], f = {};
            f[c] = d[e], a = angular.extend(a, f), delete a[b]
        }
        return a
    }

    function c(a, b) {
        return b && (a = e(a)), a
    }

    function d(a, b, c) {
        if (void 0 == a || !a)throw new Error("The provided resource name '" + b + "' has no valid URL in the '" + c + "' property.");
        return a
    }

    function e(a) {
        return a.replace(/{.*}/g, "")
    }

    function f(a) {
        var b = {}, c = /{\?(.*)}/g, d = c.exec(a)[1].split(",");
        return angular.forEach(d, function (a) {
            b[a] = void 0
        }), b
    }

    angular.module("spring-data-rest", ["ngResource"]), angular.module("spring-data-rest").provider("SpringDataRestAdapter", function () {
        var e = {links: {key: "_links"}, embedded: {key: "_embedded", value: "_embeddedItems"}, hrefKey: "href", resourcesKey: "_resources", resourcesFunction: void 0};
        return{config: function (b) {
            if ("undefined" != typeof b) {
                if (!angular.isObject(b))throw new Error("The given configuration '" + b + "' is not an object.");
                if (void 0 != b.resourcesFunction && "function" != typeof b.resourcesFunction)throw new Error("The given resource function '" + b.resourcesFunction + "' is not of type function.");
                e = a(e, b)
            }
            return e
        }, $get: ["$injector", function (a) {
            function g(b, c, d, f) {
                return void 0 == e.resourcesFunction ? a.get("$resource")(b, c, d, f) : e.resourcesFunction(b, c, d, f)
            }

            var h = function (a) {
                var i = function (b, h, i, j) {
                    function k(b, f, h, i) {
                        var j = d(a[e.links.key][b][e.hrefKey], b, e.hrefKey), k = c(j, a[e.links.key][b].templated);
                        return g(k, f, h, i)
                    }

                    var l = this[e.links.key], m = h;
                    if (angular.isObject(b)) {
                        if (!b.name)throw new Error("The provided resource object must contain a name property.");
                        var n = b.parameters;
                        return h && angular.isObject(h) ? m = n && angular.isObject(n) ? angular.extend(angular.copy(h), angular.copy(n)) : angular.copy(h) : n && angular.isObject(n) && (m = angular.copy(n)), k(b.name, m, i, j)
                    }
                    if (b in l)return k(b, m, i, j);
                    var o = [];
                    return angular.forEach(l, function (a, b) {
                        if (a.templated) {
                            var c = f(a[e.hrefKey]);
                            o.push({name: b, parameters: c})
                        } else o.push({name: b})
                    }), o
                };
                if (!angular.isObject(a) || a instanceof Array)throw new Error("Given data '" + a + "' is not of type object.");
                var j = void 0;
                if (e.links.key in a) {
                    var k = {};
                    k[e.resourcesKey] = i, j = angular.extend(this, angular.copy(a), k)
                }
                return e.embedded.key in a && (j || (j = angular.copy(a)), j = b(j, e.embedded.key, e.embedded.value), angular.forEach(j[e.embedded.value], function (a, b) {
                    j[e.embedded.value][b] = new h(a)
                })), j ? j : a
            };
            return h
        }]}
    }), angular.module("spring-data-rest").provider("SpringDataRestInterceptor", ["$httpProvider", "SpringDataRestAdapterProvider", function (a) {
        return{apply: function () {
            a.interceptors.push("SpringDataRestInterceptor")
        }, $get: ["SpringDataRestAdapter", "$q", function (a, b) {
            return{response: function (c) {
                return c && angular.isObject(c.data) && (c.data = new a(c.data)), c || b.when(c)
            }}
        }]}
    }])
}();
