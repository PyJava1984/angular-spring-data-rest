/*!
 * angular-spring-data-rest 0.2.0
 * Copyright 2014 Guy Brûlé (@guy_labs)
 * https://github.com/guylabs/angular-spring-data-rest
 */
function deepExtend(a) {
    return angular.forEach(arguments, function (b) {
        b !== a && angular.forEach(b, function (b, c) {
            a[c] && a[c].constructor && a[c].constructor === Object ? deepExtend(a[c], b) : a[c] = b
        })
    }), angular.copy(a)
}
function extractUrl(a, b) {
    return b && (a = removeTemplateParameters(a)), a
}
angular.module("spring-data-rest", ["ngResource"]), angular.module("spring-data-rest").provider("SpringDataRestAdapter", function () {
    var a = {links: {key: "_links"}, embedded: {key: "_embedded", value: "_embeddedItems"}, hrefKey: "href", resourcesKey: "_resources", resourcesFunction: void 0};
    return{config: function (b) {
        if ("undefined" != typeof b) {
            if (!angular.isObject(b))throw new Error("The given configuration '" + b + "' is not an object.");
            if (void 0 != b.resourcesFunction && "function" != typeof b.resourcesFunction)throw new Error("The given resource function '" + b.resourcesFunction + "' is not of type function.");
            a = deepExtend(a, b)
        }
        return a
    }, $get: ["$injector", function (b) {
        function c(c, d, e, f) {
            return void 0 == a.resourcesFunction ? b.get("$resource")(c, d, e, f) : a.resourcesFunction(c, d, e, f)
        }

        var d = function (b) {
            var e = function (d, e, f, g) {
                var h = this[a.links.key];
                if (angular.isObject(d)) {
                    if (!d.name)throw new Error("The provided resource object must contain a name property.");
                    var i = e, j = d.parameters;
                    return e && angular.isObject(e) ? i = j && angular.isObject(j) ? angular.extend(angular.copy(e), angular.copy(j)) : angular.copy(e) : j && angular.isObject(j) && (i = angular.copy(j)), c(extractUrl(b[a.links.key][d.name][a.hrefKey], b[a.links.key][d.name].templated), i, f, g)
                }
                if (d in h)return c(extractUrl(b[a.links.key][d][a.hrefKey], b[a.links.key][d].templated), e, f, g);
                var k = [];
                return angular.forEach(h, function (b, c) {
                    if (b.templated) {
                        var d = extractTemplateParameters(b[a.hrefKey]);
                        k.push({name: c, parameters: d})
                    } else k.push({name: c})
                }), k
            };
            if (!angular.isObject(b) || b instanceof Array)throw new Error("Given data '" + b + "' is not of type object.");
            var f = void 0;
            if (a.links.key in b) {
                var g = {};
                g[a.resourcesKey] = e, f = angular.extend(this, angular.copy(b), g)
            }
            return a.embedded.key in b && (f || (f = angular.copy(b)), f = moveArray(f, a.embedded.key, a.embedded.value), angular.forEach(f[a.embedded.value], function (b, c) {
                f[a.embedded.value][c] = new d(b)
            })), f ? f : b
        };
        return d
    }]}
}), angular.module("spring-data-rest").provider("SpringDataRestInterceptor", ["$httpProvider", "SpringDataRestAdapterProvider", function (a) {
    return{apply: function () {
        a.interceptors.push("SpringDataRestInterceptor")
    }, $get: ["SpringDataRestAdapter", "$q", function (a, b) {
        return{response: function (c) {
            return c && angular.isObject(c.data) && (c.data = new a(c.data)), c || b.when(c)
        }}
    }]}
}]);
var moveArray = function (a, b, c) {
    var d = a[b];
    if (d) {
        var e = Object.keys(d)[0], f = {};
        f[c] = d[e], a = angular.extend(a, f), delete a[b]
    }
    return a
}, removeTemplateParameters = function (a) {
    return a.replace(/{.*}/g, "")
}, extractTemplateParameters = function (a) {
    var b = {}, c = /{\?(.*)}/g, d = c.exec(a)[1].split(",");
    return angular.forEach(d, function (a) {
        b[a] = void 0
    }), b
};
